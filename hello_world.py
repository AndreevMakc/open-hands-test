#!/usr/bin/env python3
"""
Hello World –Ω–∞ Python

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Python –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Product Catalog Service.
"""

import asyncio
import sys
from datetime import datetime
from typing import List, Dict, Any


def hello_world():
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è Hello World"""
    print("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç")
    print("Hello, World! üêç")
    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


def demonstrate_python_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Python"""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Python ===")
    
    # –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
    name = "Python"
    version = sys.version_info
    print(f"–Ø–∑—ã–∫: {name}")
    print(f"–í–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    # –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –∏ —Å–ª–æ–≤–∞—Ä—è–º–∏
    languages = ["Python", "JavaScript", "Go", "Rust"]
    print(f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏: {', '.join(languages)}")
    
    # –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
    project_info = {
        "name": "Product Catalog Service",
        "architecture": "Clean Architecture",
        "framework": "FastAPI",
        "database": "PostgreSQL",
        "cache": "Redis",
        "features": [
            "Hierarchical categories",
            "Configurable attributes", 
            "Full CRUD operations",
            "Search and filtering",
            "RESTful API"
        ]
    }
    
    print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:")
    for key, value in project_info.items():
        if isinstance(value, list):
            print(f"  {key}: {', '.join(value)}")
        else:
            print(f"  {key}: {value}")


def fibonacci(n: int) -> List[int]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏"""
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    
    fib = [0, 1]
    for i in range(2, n):
        fib.append(fib[i-1] + fib[i-2])
    
    return fib


def demonstrate_algorithms():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ ===")
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏
    fib_sequence = fibonacci(10)
    print(f"–ü–µ—Ä–≤—ã–µ 10 —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏: {fib_sequence}")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞
    numbers = [64, 34, 25, 12, 22, 11, 90]
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫: {numbers}")
    sorted_numbers = sorted(numbers)
    print(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {sorted_numbers}")
    
    # –†–∞–±–æ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
    set1 = {1, 2, 3, 4, 5}
    set2 = {4, 5, 6, 7, 8}
    print(f"–ú–Ω–æ–∂–µ—Å—Ç–≤–æ 1: {set1}")
    print(f"–ú–Ω–æ–∂–µ—Å—Ç–≤–æ 2: {set2}")
    print(f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: {set1 & set2}")
    print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: {set1 | set2}")


class ProductCatalogDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
    
    def __init__(self):
        self.categories = []
        self.products = []
    
    def add_category(self, name: str, slug: str, description: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        category = {
            "id": len(self.categories) + 1,
            "name": name,
            "slug": slug,
            "description": description,
            "created_at": datetime.now()
        }
        self.categories.append(category)
        return category
    
    def add_product(self, name: str, price: float, category_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"""
        product = {
            "id": len(self.products) + 1,
            "name": name,
            "price": price,
            "category_id": category_id,
            "created_at": datetime.now()
        }
        self.products.append(product)
        return product
    
    def get_products_by_category(self, category_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return [p for p in self.products if p["category_id"] == category_id]
    
    def display_catalog(self):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥"""
        print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ ===")
        
        for category in self.categories:
            print(f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']} ({category['slug']})")
            if category['description']:
                print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {category['description']}")
            
            products = self.get_products_by_category(category['id'])
            if products:
                print("  –¢–æ–≤–∞—Ä—ã:")
                for product in products:
                    print(f"    - {product['name']}: {product['price']} —Ä—É–±.")
            else:
                print("  –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


async def async_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    
    async def fetch_data(name: str, delay: float) -> str:
        """–ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {name}...")
        await asyncio.sleep(delay)
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ {name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return f"–î–∞–Ω–Ω—ã–µ {name}"
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    tasks = [
        fetch_data("–∫–∞—Ç–µ–≥–æ—Ä–∏–π", 1.0),
        fetch_data("—Ç–æ–≤–∞—Ä–æ–≤", 1.5),
        fetch_data("–∞—Ç—Ä–∏–±—É—Ç–æ–≤", 0.8)
    ]
    
    results = await asyncio.gather(*tasks)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üêç Python Hello World Demo üêç")
    print("=" * 50)
    
    # –ë–∞–∑–æ–≤—ã–π Hello World
    hello_world()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Python
    demonstrate_python_features()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    demonstrate_algorithms()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –û–û–ü
    catalog = ProductCatalogDemo()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    electronics = catalog.add_category("–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "electronics", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
    books = catalog.add_category("–ö–Ω–∏–≥–∏", "books", "–ü–µ—á–∞—Ç–Ω—ã–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
    catalog.add_product("–°–º–∞—Ä—Ç—Ñ–æ–Ω iPhone", 99999.99, electronics["id"])
    catalog.add_product("–ù–æ—É—Ç–±—É–∫ MacBook", 199999.99, electronics["id"])
    catalog.add_product("Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", 1500.00, books["id"])
    catalog.add_product("Clean Architecture", 2500.00, books["id"])
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
    catalog.display_catalog()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    print("\n–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    asyncio.run(async_demo())
    
    print("\n" + "=" * 50)
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ Product Catalog Service –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("  python -m uvicorn src.main:app --reload")
    print("\n–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:")
    print("  http://localhost:8000/api/v1/docs")


if __name__ == "__main__":
    main()
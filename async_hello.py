#!/usr/bin/env python3
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Hello World –Ω–∞ Python
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è asyncio –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import aiohttp
import time
from typing import List, Dict, Any
from concurrent.futures import ThreadPoolExecutor
import random

async def simple_greeting(name: str, delay: float = 1.0) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {name}...")
    await asyncio.sleep(delay)
    greeting = f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã"
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {name}")
    return greeting

async def fetch_greeting_from_api(name: str) -> str:
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑ API"""
    # –ò–º–∏—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    await asyncio.sleep(random.uniform(0.5, 2.0))
    greetings = [
        f"Hello, {name}! üåç",
        f"Bonjour, {name}! üá´üá∑", 
        f"Hola, {name}! üá™üá∏",
        f"Guten Tag, {name}! üá©üá™",
        f"Konnichiwa, {name}! üáØüáµ"
    ]
    return random.choice(greetings)

async def process_user_data(user_id: int) -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    tasks = [
        fetch_user_profile(user_id),
        fetch_user_preferences(user_id),
        fetch_user_activity(user_id)
    ]
    
    profile, preferences, activity = await asyncio.gather(*tasks)
    
    result = {
        "user_id": user_id,
        "profile": profile,
        "preferences": preferences,
        "activity": activity,
        "processed_at": time.time()
    }
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    return result

async def fetch_user_profile(user_id: int) -> Dict[str, str]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await asyncio.sleep(0.5)
    return {
        "name": f"User_{user_id}",
        "email": f"user{user_id}@example.com",
        "status": "active"
    }

async def fetch_user_preferences(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await asyncio.sleep(0.3)
    return {
        "language": random.choice(["ru", "en", "fr", "es"]),
        "theme": random.choice(["light", "dark"]),
        "notifications": random.choice([True, False])
    }

async def fetch_user_activity(user_id: int) -> Dict[str, int]:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await asyncio.sleep(0.7)
    return {
        "login_count": random.randint(1, 100),
        "messages_sent": random.randint(0, 50),
        "last_seen_days_ago": random.randint(0, 30)
    }

async def greeting_producer(queue: asyncio.Queue, names: List[str]):
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    print("üè≠ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π...")
    
    for name in names:
        greeting = await fetch_greeting_from_api(name)
        await queue.put(greeting)
        print(f"üì§ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {greeting}")
        await asyncio.sleep(0.1)
    
    # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await queue.put(None)
    print("üèÅ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

async def greeting_consumer(queue: asyncio.Queue, consumer_id: int):
    """–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    print(f"üõí –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è {consumer_id}...")
    processed = 0
    
    while True:
        greeting = await queue.get()
        
        if greeting is None:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
            await queue.put(None)
            break
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await asyncio.sleep(0.2)
        print(f"üîÑ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å {consumer_id} –æ–±—Ä–∞–±–æ—Ç–∞–ª: {greeting}")
        processed += 1
        
        queue.task_done()
    
    print(f"‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å {consumer_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")

def cpu_intensive_task(n: int) -> int:
    """CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ThreadPoolExecutor"""
    result = 0
    for i in range(n):
        result += i ** 2
    return result

async def run_cpu_tasks_async(numbers: List[int]) -> List[int]:
    """–ó–∞–ø—É—Å–∫ CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    print("üñ•Ô∏è  –ó–∞–ø—É—Å–∫–∞–µ–º CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏...")
    
    loop = asyncio.get_event_loop()
    
    with ThreadPoolExecutor(max_workers=3) as executor:
        tasks = [
            loop.run_in_executor(executor, cpu_intensive_task, n)
            for n in numbers
        ]
        
        results = await asyncio.gather(*tasks)
    
    print("‚úÖ CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    return results

class AsyncGreetingService:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    def __init__(self):
        self.greeting_cache = {}
        self.request_count = 0
    
    async def get_greeting(self, name: str, language: str = "ru") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.request_count += 1
        cache_key = f"{name}_{language}"
        
        if cache_key in self.greeting_cache:
            print(f"üíæ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è {cache_key}")
            return self.greeting_cache[cache_key]
        
        print(f"üåê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {cache_key}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        await asyncio.sleep(0.5)
        
        greetings = {
            "ru": f"–ü—Ä–∏–≤–µ—Ç, {name}! üá∑üá∫",
            "en": f"Hello, {name}! üá∫üá∏",
            "fr": f"Bonjour, {name}! üá´üá∑",
            "es": f"Hola, {name}! üá™üá∏"
        }
        
        greeting = greetings.get(language, greetings["en"])
        self.greeting_cache[cache_key] = greeting
        
        return greeting
    
    async def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "total_requests": self.request_count,
            "cache_size": len(self.greeting_cache),
            "cached_greetings": list(self.greeting_cache.keys())
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üêç –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Python Hello World! üêç")
    print("=" * 60)
    
    # 1. –ü—Ä–æ—Å—Ç—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    print("\n1Ô∏è‚É£ –ü—Ä–æ—Å—Ç—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")
    names = ["–ê–Ω–Ω–∞", "–ë–æ–±", "–í–∏–∫—Ç–æ—Ä–∏—è"]
    
    start_time = time.time()
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("   üìù –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:")
    for name in names:
        greeting = await simple_greeting(name, 0.5)
        print(f"     {greeting}")
    
    sequential_time = time.time() - start_time
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n   ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:")
    start_time = time.time()
    
    tasks = [simple_greeting(name, 0.5) for name in names]
    greetings = await asyncio.gather(*tasks)
    
    for greeting in greetings:
        print(f"     {greeting}")
    
    parallel_time = time.time() - start_time
    
    print(f"\n   ‚è±Ô∏è  –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: {sequential_time:.2f}—Å")
    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {parallel_time:.2f}—Å")
    print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {sequential_time/parallel_time:.2f}x")
    
    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\n2Ô∏è‚É£ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    user_ids = [1, 2, 3, 4, 5]
    
    start_time = time.time()
    user_data_tasks = [process_user_data(uid) for uid in user_ids]
    user_data_results = await asyncio.gather(*user_data_tasks)
    processing_time = time.time() - start_time
    
    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(user_data_results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {processing_time:.2f}—Å")
    
    # 3. Producer-Consumer –ø–∞—Ç—Ç–µ—Ä–Ω
    print("\n3Ô∏è‚É£ Producer-Consumer —Å –æ—á–µ—Ä–µ–¥—å—é:")
    queue = asyncio.Queue(maxsize=5)
    producer_names = ["Alice", "Bob", "Charlie", "Diana"]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
    producer_task = asyncio.create_task(
        greeting_producer(queue, producer_names)
    )
    
    consumer_tasks = [
        asyncio.create_task(greeting_consumer(queue, i))
        for i in range(2)
    ]
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    await producer_task
    await asyncio.gather(*consumer_tasks)
    
    # 4. CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    print("\n4Ô∏è‚É£ CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å ThreadPoolExecutor:")
    numbers = [100000, 200000, 150000, 300000]
    
    start_time = time.time()
    results = await run_cpu_tasks_async(numbers)
    cpu_time = time.time() - start_time
    
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {cpu_time:.2f}—Å")
    
    # 5. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    print("\n5Ô∏è‚É£ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π:")
    service = AsyncGreetingService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    test_requests = [
        ("–ê–Ω–Ω–∞", "ru"),
        ("John", "en"),
        ("Marie", "fr"),
        ("–ê–Ω–Ω–∞", "ru"),  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à–∞
        ("Carlos", "es")
    ]
    
    for name, lang in test_requests:
        greeting = await service.get_greeting(name, lang)
        print(f"   {greeting}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    stats = await service.get_stats()
    print(f"\n   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞:")
    print(f"     –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
    print(f"     –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {stats['cache_size']}")
    print(f"     –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {stats['cached_greetings']}")
    
    print("\nüéâ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:")
    print("  ‚Ä¢ async/await —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
    print("  ‚Ä¢ asyncio.gather() –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    print("  ‚Ä¢ asyncio.Queue –¥–ª—è Producer-Consumer")
    print("  ‚Ä¢ ThreadPoolExecutor –¥–ª—è CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
    print("  ‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã")
    print("  ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")

if __name__ == "__main__":
    asyncio.run(main())
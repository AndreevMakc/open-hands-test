#!/usr/bin/env python3
"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Hello World –Ω–∞ Python
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from functools import reduce, partial
from itertools import chain, cycle, islice
from typing import Callable, List, Iterator, Any

# –ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def greet(name: str) -> str:
    """–ß–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    return f"–ü—Ä–∏–≤–µ—Ç, {name}!"

def add_exclamation(text: str) -> str:
    """–î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫"""
    return f"{text}!"

def make_uppercase(text: str) -> str:
    """–°–¥–µ–ª–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏"""
    return text.upper()

def add_emoji(emoji: str) -> Callable[[str], str]:
    """–§—É–Ω–∫—Ü–∏—è –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏"""
    def inner(text: str) -> str:
        return f"{emoji} {text} {emoji}"
    return inner

# –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
def compose(*functions):
    """–ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    return reduce(lambda f, g: lambda x: f(g(x)), functions, lambda x: x)

# –ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
def curry_greet(greeting: str) -> Callable[[str], str]:
    """–ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    return lambda name: f"{greeting}, {name}!"

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
def greeting_generator(names: List[str]) -> Iterator[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    for name in names:
        yield greet(name)

def infinite_hello() -> Iterator[str]:
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Hello"""
    greetings = ["Hello", "–ü—Ä–∏–≤–µ—Ç", "Hola", "Bonjour", "Guten Tag"]
    return cycle(greetings)

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞
def apply_to_all(func: Callable[[str], str], items: List[str]) -> List[str]:
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
    return list(map(func, items))

def filter_long_names(names: List[str], min_length: int = 5) -> List[str]:
    """–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞"""
    return list(filter(lambda name: len(name) >= min_length, names))

# –†–µ–∫—É—Ä—Å–∏—è
def factorial(n: int) -> int:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞"""
    return 1 if n <= 1 else n * factorial(n - 1)

def fibonacci_sequence(n: int) -> List[int]:
    """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏ —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é"""
    def fib(x: int) -> int:
        return x if x <= 1 else fib(x - 1) + fib(x - 2)
    
    return [fib(i) for i in range(n)]

# –ú–æ–Ω–∞–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
class Maybe:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–Ω–∞–¥–∞ Maybe"""
    
    def __init__(self, value: Any):
        self.value = value
    
    def bind(self, func: Callable) -> 'Maybe':
        """–ú–æ–Ω–∞–¥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è bind"""
        if self.value is None:
            return Maybe(None)
        try:
            return Maybe(func(self.value))
        except:
            return Maybe(None)
    
    def __repr__(self) -> str:
        return f"Maybe({self.value})"

def safe_divide(x: float, y: float) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ"""
    if y == 0:
        raise ValueError("Division by zero")
    return x / y

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üêç –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Python Hello World! üêç")
    print("=" * 60)
    
    # –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    names = ["–ê–Ω–Ω–∞", "–ë–æ–±", "–í–∏–∫—Ç–æ—Ä–∏—è", "–ì—Ä–∏–≥–æ—Ä–∏–π", "–î–∞—Ä—å—è"]
    print("üë• –ò–º–µ–Ω–∞:", names)
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    print("\nüéØ –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")
    greetings = list(map(greet, names))
    for greeting in greetings:
        print(f"   {greeting}")
    
    # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    print("\nüîß –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π:")
    enhanced_greet = compose(
        add_emoji("üéâ"),
        add_exclamation,
        greet
    )
    
    for name in names[:3]:
        result = enhanced_greet(name)
        print(f"   {result}")
    
    # –ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüçõ –ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    morning_greet = curry_greet("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ")
    evening_greet = curry_greet("–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä")
    
    print(f"   {morning_greet('–ú–∏—Ä')}")
    print(f"   {evening_greet('Python')}")
    
    # –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    print("\n‚ö° –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞:")
    add_wave = add_emoji("üëã")
    waving_greetings = apply_to_all(add_wave, greetings[:3])
    
    for greeting in waving_greetings:
        print(f"   {greeting}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    print("\nüîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª–∏–Ω–Ω—ã—Ö –∏–º–µ–Ω:")
    long_names = filter_long_names(names)
    print(f"   –î–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞: {long_names}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã:")
    greeting_gen = greeting_generator(names[:3])
    print("   –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π:")
    for greeting in greeting_gen:
        print(f"     {greeting}")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)
    print("\n‚ôæÔ∏è  –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (–ø–µ—Ä–≤—ã–µ 8):")
    infinite_gen = infinite_hello()
    limited_greetings = list(islice(infinite_gen, 8))
    print(f"   {limited_greetings}")
    
    # –†–µ–∫—É—Ä—Å–∏—è
    print("\nüîÅ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print(f"   –§–∞–∫—Ç–æ—Ä–∏–∞–ª 5: {factorial(5)}")
    fib_seq = fibonacci_sequence(8)
    print(f"   –§–∏–±–æ–Ω–∞—á—á–∏ (8): {fib_seq}")
    
    # –ú–æ–Ω–∞–¥—ã
    print("\nüé≠ –ú–æ–Ω–∞–¥—ã (Maybe):")
    maybe_value = Maybe(10)
    result = (maybe_value
              .bind(lambda x: x * 2)
              .bind(lambda x: x + 5)
              .bind(lambda x: safe_divide(x, 5)))
    print(f"   Maybe(10) -> *2 -> +5 -> /5 = {result}")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    maybe_zero = Maybe(10)
    result_zero = (maybe_zero
                   .bind(lambda x: safe_divide(x, 0))
                   .bind(lambda x: x + 100))
    print(f"   Maybe(10) -> /0 -> +100 = {result_zero}")
    
    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
    print("\nüìä –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    numbers = [1, 2, 3, 4, 5]
    
    # Map, filter, reduce
    squared = list(map(lambda x: x**2, numbers))
    evens = list(filter(lambda x: x % 2 == 0, numbers))
    sum_all = reduce(lambda x, y: x + y, numbers)
    
    print(f"   –ß–∏—Å–ª–∞: {numbers}")
    print(f"   –ö–≤–∞–¥—Ä–∞—Ç—ã: {squared}")
    print(f"   –ß–µ—Ç–Ω—ã–µ: {evens}")
    print(f"   –°—É–º–º–∞: {sum_all}")
    
    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
    print("\nüß© –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:")
    multiply = lambda x, y: x * y
    double = partial(multiply, 2)
    triple = partial(multiply, 3)
    
    print(f"   double(5) = {double(5)}")
    print(f"   triple(4) = {triple(4)}")
    
    print("\nüéâ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:")
    print("  ‚Ä¢ –ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    print("  ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞")
    print("  ‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π")
    print("  ‚Ä¢ –ö–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("  ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã")
    print("  ‚Ä¢ –†–µ–∫—É—Ä—Å–∏—è")
    print("  ‚Ä¢ –ú–æ–Ω–∞–¥—ã")
    print("  ‚Ä¢ Map, Filter, Reduce")
    print("  ‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ")

if __name__ == "__main__":
    main()
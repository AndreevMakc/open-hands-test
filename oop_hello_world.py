#!/usr/bin/env python3
"""
–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Hello World –Ω–∞ Python
"""

from abc import ABC, abstractmethod
from datetime import datetime
from typing import List, Optional

class Greeter(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
    
    @abstractmethod
    def greet(self, name: str) -> str:
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        pass

class SimpleGreeter(Greeter):
    """–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    
    def greet(self, name: str) -> str:
        return f"–ü—Ä–∏–≤–µ—Ç, {name}!"

class FormalGreeter(Greeter):
    """–§–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    
    def greet(self, name: str) -> str:
        return f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!"

class TimeBasedGreeter(Greeter):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    
    def greet(self, name: str) -> str:
        hour = datetime.now().hour
        
        if 5 <= hour < 12:
            time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        elif 12 <= hour < 17:
            time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        elif 17 <= hour < 22:
            time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        else:
            time_greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
        
        return f"{time_greeting}, {name}!"

class Person:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞"""
    
    def __init__(self, name: str, age: Optional[int] = None, language: str = "—Ä—É—Å—Å–∫–∏–π"):
        self.name = name
        self.age = age
        self.language = language
        self.greetings_received: List[str] = []
    
    def receive_greeting(self, greeting: str) -> None:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        self.greetings_received.append(greeting)
        print(f"üë§ {self.name}: {greeting}")
    
    def introduce(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è"""
        intro = f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {self.name}"
        if self.age:
            intro += f", –º–Ω–µ {self.age} –ª–µ—Ç"
        intro += f", —è –≥–æ–≤–æ—Ä—é –Ω–∞ {self.language} —è–∑—ã–∫–µ."
        return intro
    
    def get_greeting_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        return len(self.greetings_received)

class HelloWorldApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hello World"""
    
    def __init__(self):
        self.greeters = {
            "–ø—Ä–æ—Å—Ç–æ–µ": SimpleGreeter(),
            "—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ": FormalGreeter(),
            "–ø–æ –≤—Ä–µ–º–µ–Ω–∏": TimeBasedGreeter()
        }
        self.people: List[Person] = []
    
    def add_person(self, person: Person) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞"""
        self.people.append(person)
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω: {person.introduce()}")
    
    def greet_all(self, greeter_type: str = "–ø—Ä–æ—Å—Ç–æ–µ") -> None:
        """–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ—Ö –ª—é–¥–µ–π"""
        if greeter_type not in self.greeters:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {greeter_type}")
            return
        
        greeter = self.greeters[greeter_type]
        print(f"\nüéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º {greeter_type} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:")
        
        for person in self.people:
            greeting = greeter.greet(person.name)
            person.receive_greeting(greeting)
    
    def show_statistics(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –ª—é–¥–µ–π: {len(self.people)}")
        
        for person in self.people:
            count = person.get_greeting_count()
            print(f"   {person.name}: –ø–æ–ª—É—á–∏–ª {count} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π")
    
    def run_demo(self) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
        print("üêç –û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Hello World! üêç")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –ª—é–¥–µ–π
        people_data = [
            ("–ê–Ω–Ω–∞", 25, "—Ä—É—Å—Å–∫–∏–π"),
            ("John", 30, "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"),
            ("Marie", 28, "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"),
            ("Python Developer", None, "Python")
        ]
        
        for name, age, language in people_data:
            person = Person(name, age, language)
            self.add_person(person)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        for greeter_type in self.greeters.keys():
            self.greet_all(greeter_type)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_statistics()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞
        print(f"\nüîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞:")
        test_name = "–ú–∏—Ä"
        
        for name, greeter in self.greeters.items():
            greeting = greeter.greet(test_name)
            print(f"   {name.capitalize()}: {greeting}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = HelloWorldApp()
    app.run_demo()
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –û–û–ü –≤ Python:")
    print("  ‚Ä¢ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
    print("  ‚Ä¢ –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º")
    print("  ‚Ä¢ –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è")
    print("  ‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è")
    print("  ‚Ä¢ –¢–∏–ø–∏–∑–∞—Ü–∏—è (type hints)")

if __name__ == "__main__":
    main()